import Unit from './unit'
import UnitShape, {UnitBasisType, UnitShapeMap} from './unitShape'

export class RelativeUnit extends Unit {

    relativeTo: Unit
    relativeUnitPerThisUnit: number
    
    constructor(relativeTo:Unit, relativeUnitPerThisUnit:number, name:string, abbreviation?: string, otherNames?: Array<string>){
        super(relativeTo.shape, name, abbreviation, otherNames)

        this.relativeUnitPerThisUnit = relativeUnitPerThisUnit
        this.relativeTo = relativeTo
    }

    fromBaseSI(quantityInBaseSI: number): number {
        return this.relativeTo.fromBaseSI(quantityInBaseSI)/this.relativeUnitPerThisUnit
    }

    toBaseSI(quantityInThisUnit: number): number {
        return this.relativeTo.toBaseSI(quantityInThisUnit*this.relativeUnitPerThisUnit)
    }

    static MultipleOf(relativeTo:Unit, relativeUnitPerThisUnit:number, name:string, abbreviation?: string, otherNames?: Array<string>){
        return new RelativeUnit(relativeTo, relativeUnitPerThisUnit, name, abbreviation, otherNames)
    }

    static FractionOf(relativeTo:Unit, thisUnitPerRelativeUnit: number, name: string, abbreviation?: string, otherNames?: Array<string>): RelativeUnit{
        return new RelativeUnit(relativeTo, 1/thisUnitPerRelativeUnit, name, abbreviation, otherNames)
    }
}